buildscript {
    repositories {
        mavenLocal()
//        maven { url "https://maven.aliyun.com/repository/grails-core" }
        maven { url "https://repo.grails.org/grails/core" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsVersion"
        classpath "org.grails.plugins:hibernate5:${gormVersion-".RELEASE"}"
        classpath "org.grails.plugins:views-gradle:1.2.9"
    }
}

ext {
    grailsApps = ['qms-controller']
    grailsPlugins = ['qms-domain', 'qms-service', 'qms-job']
}

subprojects { project ->
    boolean isGrailsApp = grailsApps.contains(project.name)
    boolean isGrailsPlugin = grailsPlugins.contains(project.name)
    boolean isGrailsProject = isGrailsApp || isGrailsPlugin

    if ( isGrailsProject ) {
        apply plugin: "eclipse"
        apply plugin: "idea"


        if (isGrailsApp) {
            apply plugin: "war"
            apply plugin: "org.grails.grails-web"
        }

        if (isGrailsPlugin) {
            apply plugin: "org.grails.grails-plugin"
            apply plugin: "org.grails.grails-plugin-publish"
        }

        apply plugin: "org.grails.plugins.views-json"
        repositories {
            mavenLocal()
            maven { url "https://repo.grails.org/grails/core" }
        }

        dependencies {
            compile "org.springframework.boot:spring-boot-starter-logging"
            compile "org.springframework.boot:spring-boot-autoconfigure"
            compile "org.grails:grails-core"
            compile "org.springframework.boot:spring-boot-starter-actuator"
            compile "org.springframework.boot:spring-boot-starter-tomcat"
            compile "org.grails:grails-plugin-url-mappings"
            compile "org.grails:grails-plugin-rest"
            compile "org.grails:grails-plugin-codecs"
            compile "org.grails:grails-plugin-interceptors"
            compile "org.grails:grails-plugin-services"
            compile "org.grails:grails-plugin-datasource"
            compile "org.grails:grails-plugin-databinding"
            compile "org.grails:grails-web-boot"
            compile "org.grails:grails-logging"
            compile "org.grails.plugins:cache"
            compile "org.grails.plugins:async"
            compile "org.grails.plugins:hibernate5"
            compile "org.hibernate:hibernate-core:5.1.16.Final"
            compile "org.grails.plugins:views-json"
            compile "org.grails.plugins:views-json-templates"
            console "org.grails:grails-console"
            runtime "org.glassfish.web:el-impl:2.1.2-b03"
            runtime "com.h2database:h2"
            runtime "org.apache.tomcat:tomcat-jdbc"
            testCompile "org.grails:grails-gorm-testing-support"
            testCompile "org.grails:grails-datastore-rest-client"
            testCompile "org.grails:grails-web-testing-support"
            testRuntime "org.seleniumhq.selenium:selenium-htmlunit-driver:2.47.1"
            testRuntime "net.sourceforge.htmlunit:htmlunit:2.18"
        }

        if (isGrailsApp) {
            dependencies {
                compile "org.grails.plugins:events"
                profile "org.grails.profiles:rest-api"
                testCompile "org.grails.plugins:geb:1.1.2"
                testRuntime "org.seleniumhq.selenium:selenium-chrome-driver:2.47.1"
            }
        }

        if (isGrailsPlugin) {
            dependencies {
                compile "org.grails:grails-plugin-async"
                profile "org.grails.profiles:rest-api-plugin"
                provided "org.grails:grails-plugin-services"
                provided "org.grails:grails-plugin-domain-class"
                provided "org.springframework.boot:spring-boot-starter-tomcat"
                testCompile "org.grails:grails-plugin-testing"
                testCompile "org.grails.plugins:geb"
            }
        }

        bootRun {
            jvmArgs('-Dspring.output.ansi.enabled=always')
            addResources = true
            String springProfilesActive = 'spring.profiles.active'
            systemProperty springProfilesActive, System.getProperty(springProfilesActive)
        }


        if (isGrailsApp) {
            tasks.withType(Test) {
                systemProperty "geb.env", System.getProperty('geb.env')
                systemProperty "geb.build.reportsDir", reporting.file("geb/integrationTest")
                systemProperty "webdriver.chrome.driver", System.getProperty('webdriver.chrome.driver')
                systemProperty "webdriver.gecko.driver", System.getProperty('webdriver.gecko.driver')
            }
        }

        if (isGrailsPlugin) {
            // enable if you wish to package this plugin as a standalone application
            bootRepackage.enabled = false
            grailsPublish {
                // TODO: Provide values here
                user = 'user'
                key = 'key'
                githubSlug = 'foo/bar'
                license {
                    name = 'Apache-2.0'
                }
                title = "My Plugin"
                desc = "Full plugin description"
                developers = [johndoe: "John Doe"]
            }
        }
    }
}